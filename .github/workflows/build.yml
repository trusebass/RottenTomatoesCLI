name: Go Build and Test

on:
  push:
    tags:
      - 'v*'  # Run workflow on version tags, e.g. v1.0.0
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.23', '1.x']

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
        
    - name: Build
      run: |
        cd rt-tui
        go build -v -o rotten${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        
    - name: Debug build output
      run: |
        echo "Contents of build directory:"
        ls -la rt-tui/
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: rotten-${{ matrix.os }}-go${{ matrix.go }}
        path: rt-tui/rotten*
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      # Enhanced debugging to see exact file structure
      - name: Debug artifacts
        run: |
          echo "Listing all downloaded artifacts with detailed view:"
          find artifacts -type f | sort
          echo "Contents of each artifact directory:"
          for dir in artifacts/*/; do
            echo "Directory: $dir"
            ls -la "$dir"
          done
          
      # Completely revamped artifact handling
      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          
          # For debugging
          echo "Starting release preparation..."
          
          # More robust Linux artifact handling
          echo "Processing Linux artifact..."
          if [ -d "artifacts/rotten-ubuntu-latest-go1.x" ]; then
            if [ -f "artifacts/rotten-ubuntu-latest-go1.x/rotten" ]; then
              cp "artifacts/rotten-ubuntu-latest-go1.x/rotten" "release-artifacts/rotten-linux"
              chmod +x "release-artifacts/rotten-linux"
              echo "Linux binary copied successfully"
            else
              echo "Linux binary not found, searching for alternatives..."
              find artifacts/rotten-ubuntu-latest-go1.x -type f -exec file {} \; | grep "ELF.*executable" || true
              find artifacts/rotten-ubuntu-latest-go1.x -type f -exec cp {} "release-artifacts/rotten-linux" \; -quit && \
                chmod +x "release-artifacts/rotten-linux" && \
                echo "Found alternative Linux binary"
            fi
          else
            echo "Linux artifact directory not found"
          fi
          
          # More robust macOS artifact handling
          echo "Processing macOS artifact..."
          if [ -d "artifacts/rotten-macos-latest-go1.x" ]; then
            if [ -f "artifacts/rotten-macos-latest-go1.x/rotten" ]; then
              cp "artifacts/rotten-macos-latest-go1.x/rotten" "release-artifacts/rotten-macos"
              chmod +x "release-artifacts/rotten-macos"
              echo "macOS binary copied successfully"
            else
              echo "macOS binary not found, searching for alternatives..."
              find artifacts/rotten-macos-latest-go1.x -type f -exec file {} \; | grep "Mach-O.*executable" || true
              find artifacts/rotten-macos-latest-go1.x -type f -exec cp {} "release-artifacts/rotten-macos" \; -quit && \
                chmod +x "release-artifacts/rotten-macos" && \
                echo "Found alternative macOS binary"
            fi
          else
            echo "macOS artifact directory not found"
          fi
          
          # Completely reworked Windows artifact handling
          echo "Processing Windows artifact..."
          if [ -d "artifacts/rotten-windows-latest-go1.x" ]; then
            # Try multiple possible filenames
            if [ -f "artifacts/rotten-windows-latest-go1.x/rotten.exe" ]; then
              cp "artifacts/rotten-windows-latest-go1.x/rotten.exe" "release-artifacts/rotten-windows.exe"
              echo "Windows binary (rotten.exe) copied successfully"
            elif [ -f "artifacts/rotten-windows-latest-go1.x/rotten" ]; then
              cp "artifacts/rotten-windows-latest-go1.x/rotten" "release-artifacts/rotten-windows.exe"
              echo "Windows binary (rotten) copied successfully"
            else
              echo "Windows binary not found by name, searching for any .exe file..."
              find artifacts/rotten-windows-latest-go1.x -name "*.exe" -exec cp {} "release-artifacts/rotten-windows.exe" \; -quit && \
                echo "Found .exe file" || \
                echo "No .exe file found, looking for any file..."
              
              # If still not found, just take any file and rename it
              find artifacts/rotten-windows-latest-go1.x -type f -exec cp {} "release-artifacts/rotten-windows.exe" \; -quit && \
                echo "Found some file to use as Windows binary"
            fi
          else
            echo "Windows artifact directory not found"
          fi
          
          # List files for verification
          echo "Files ready for release:"
          ls -la release-artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true